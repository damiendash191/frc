/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;


import com.ctre.phoenix.motorcontrol.GroupMotorControllers;
import com.ctre.phoenix.motorcontrol.MotorCommutation;
import com.ctre.phoenix.motorcontrol.TalonSRXControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  /**
   * This function is run when the robot is first started up and should be used
   * for any initialization code.
   */
private final TalonSRX rightMotor1 = new TalonSRX(0);
private final TalonSRX rightMotor2 = new TalonSRX(1);
private final TalonSRX leftMotor1 = new TalonSRX(2);
private final TalonSRX leftMotor2 = new TalonSRX(3);    // drive train motors

//DriveTrain
DifferentialDrive DriveTrain = new DifferentialDrive(SpeedController(rightMotor1, rightMotor2), SpeedController(leftMotor1, leftMotor2));

//Intake system 
private final TalonSRX flailer = new TalonSRX(4);

//Shooter System
private final TalonSRX shootermaster = new TalonSRX(5);
private final TalonSRX shooterslave = new TalonSRX(6);

//Arms
private final TalonSRX leftArm = new TalonSRX(7);
private final TalonSRX rightArm = new TalonSRX(8);

//joystick
private final Joystick stick = new Joystick(0);

//pneumatics
private final Compressor comp = new Compressor();
private final DoubleSolenoid intakeDoor = new DoubleSolenoid(0, 1);
private final DoubleSolenoid shooterDoor = new DoubleSolenoid(2, 3);


  @Override
  public void robotInit() {
    //invert left motors
    leftMotor1.setInverted(true);
    leftMotor2.setInverted(true);
    leftArm.setInverted(true);
  }

  private SpeedController SpeedController(TalonSRX leftMotor12, TalonSRX leftMotor22) {
    return null;
  }

  @Override
  public void autonomousInit() {
  }

  @Override
  public void autonomousPeriodic() {
  }

  @Override
  public void teleopInit() {
    comp.stop();
  }

  @Override
  public void teleopPeriodic() {

    // Robot Drive
    DriveTrain.arcadeDrive(stick.getY(), stick.getZ());

    //shooter system
    if (stick.getRawButton(1)) {
      shootermaster.setPower(1.0);
      shooterslave.setPower(1.0);
    } else {
      shootermaster.set(0.0);
      shooterslave.set(0.0);
    }

 //Intake system
    if (stick.getRawButton(2)) {
      intakeDoor.set(DoubleSolenoid.Value.kForward);
      flailer.set(1);
    } else {
      intakeDoor.set(DoubleSolenoid.Value.kReverse);
      flailer.set(0);
    } 

    // compressor on and off
    if (stick.getRawButton(12)) {
      comp.start();
    } else if (stick.getRawButton(11)) {
      comp.stop();
    }
    
    //Left Arm
    if (stick.getRawButton(5)) {
      leftArm.set(1);
    } else if (sick.getRawButton(3)) {
      leftArm.set(-1);
    } else {
      leftArm.set(0);
    }
   
    //Right Arm
    if (stick.getRawButton(6)) {
      rightArm.set(1);
    } else if (stick.getRawButton(4)) {
      rightArm.set(-1);
    } else {
      rightArm.set(0);
    }





  }

  @Override
  public void testInit() {
  }

  @Override
  public void testPeriodic() {
  }

}
